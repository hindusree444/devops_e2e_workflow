pipeline {
    agent any 
    environment {
        GOOGLE_APPLICATION_CREDENTIALS = credentials('devopse2e') // GCP JSON key stored as a secret
        GCP_PROJECT = "devops-e2e-workflow"
        TF_VAR_cluster_name = "my-gke-cluster1"
        TF_VAR_zone = "europe-west1-b"
    }

    stages {
        stage('Checkout') {
            steps {
                sh 'echo "Checking out repository..."'
                git branch: 'main', url: 'https://github.com/hindusree444/devops_e2e_workflow.git'
            }
        }

        stage('Authenticate with GCP') {
            steps {
                withCredentials([file(credentialsId: 'devopse2e', variable: 'GCP_SA_KEY')]) {
                    sh '''
                        echo "Installing GKE Auth Plugin..."
                        gcloud components install gke-gcloud-auth-plugin || echo "Already installed"

                        echo "Authenticating with Google Cloud..."
                        export GOOGLE_APPLICATION_CREDENTIALS=$GCP_SA_KEY
                        gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                        gcloud auth list
                    '''
                }
            }
        }

        stage('Terraform Init') {
            steps {
                withCredentials([file(credentialsId: 'devopse2e', variable: 'GCP_SA_KEY')]) {
                    sh '''
                        export GOOGLE_APPLICATION_CREDENTIALS=$GCP_SA_KEY
                        cd spring-boot-app/terraform
                        terraform init
                    '''
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                withCredentials([file(credentialsId: 'devopse2e', variable: 'GCP_SA_KEY')]) {
                    sh '''
                        export GOOGLE_APPLICATION_CREDENTIALS=$GCP_SA_KEY
                        cd spring-boot-app/terraform
                        terraform plan
                    '''
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                withCredentials([file(credentialsId: 'devopse2e', variable: 'GCP_SA_KEY')]) {
                    sh '''
                        export GOOGLE_APPLICATION_CREDENTIALS=$GCP_SA_KEY
                        cd spring-boot-app/terraform
                        terraform apply -auto-approve
                    '''
                }
            }
        }

        stage('Build and Test') {
            steps {
                sh 'echo "Listing files before build:"'
                sh 'ls -ltr'
                sh '''
                    echo "Building Spring Boot Application..."
                    cd spring-boot-app
                    mvn clean package
                '''
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "19980617/e2ebuild:${BUILD_NUMBER}"
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    script {
                        echo "Building Docker Image..."
                        echo "DOCKER_USER: ${DOCKER_USER}"  

                        dir('spring-boot-app') {
                            sh "docker build -t ${DOCKER_IMAGE} ."
                        }

                        echo "Logging into DockerHub..."
                        sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"

                        echo "Pushing Docker Image..."
                        sh "docker push ${DOCKER_IMAGE}"
                    }
                }
            }
        }

        stage('Save Kubeconfig') {
            steps {
                sh '''
                    gcloud components install gke-gcloud-auth-plugin || echo "Already installed"
                    export USE_GKE_GCLOUD_AUTH_PLUGIN=True
                    gcloud container clusters get-credentials $TF_VAR_cluster_name --zone $TF_VAR_zone --project $GCP_PROJECT
                    cp ~/.kube/config kubeconfig
                '''
                stash name: 'kubeconfig', includes: 'kubeconfig'
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                unstash 'kubeconfig'
                sh '''
                    echo "Current Directory:"
                    pwd
                    export KUBECONFIG=kubeconfig
                    export USE_GKE_GCLOUD_AUTH_PLUGIN=True
                    kubectl apply -f deployment.yml
                    kubectl apply -f service.yml
                '''
            }
        }
    }
}
